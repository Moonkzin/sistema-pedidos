{"version":3,"sources":["services/firebase.js","contexts/auth.js","root.js","app.js","serviceWorker.js","error.js","index.js"],"names":["firebase_app__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","firebase_app__WEBPACK_IMPORTED_MODULE_0___default","n","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AuthContext","createContext","Auth","_ref","children","_useState","useState","isUserLogedIn","user","_useState2","Object","_Users_lucas_Documents_myProjects_sistema_pedidos_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","userInfo","setUserInfo","login","useCallback","provider","auth","GithubAuthProvider","signInWithRedirect","logout","signOut","then","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Provider","value","prototype","t","node","isRequired","module","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","react_hot_loader__WEBPACK_IMPORTED_MODULE_1__","react_router_dom__WEBPACK_IMPORTED_MODULE_2__","react_router_dom__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core__WEBPACK_IMPORTED_MODULE_5__","_material_ui_core__WEBPACK_IMPORTED_MODULE_6__","_contexts_auth__WEBPACK_IMPORTED_MODULE_7__","_app__WEBPACK_IMPORTED_MODULE_8__","theme","createMuiTheme","typography","useNextVariants","hot","component","App","MainPage","lazy","Promise","all","e","bind","Login","location","_useContext","useContext","_Users_lucas_Documents_myProjects_sistema_pedidos_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","didCheckUserIn","setDidCheckUserIn","useEffect","onAuthStateChanged","console","log","_Users_lucas_Documents_myProjects_sistema_pedidos_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","firstName","displayName","split","pathname","react__WEBPACK_IMPORTED_MODULE_2___default","to","react__WEBPACK_IMPORTED_MODULE_2__","fallback","path","Boolean","window","hostname","match","ErrorBoundary","state","hasError","this","props","PureComponent","protoTypes","func","ReactDOM","render","react_default","error","root","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c151d9e.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/auth'\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyCZ4fuGJyXh25M5NonyG2CvknO20S0FyfQ',\n  authDomain: 'reactzzaria-c030e.firebaseapp.com',\n  databaseURL: 'https://reactzzaria-c030e.firebaseio.com',\n  projectId: 'reactzzaria-c030e',\n  storageBucket: '',\n  messagingSenderId: '563457483452',\n  appId: '1:563457483452:web:2652f9d4e79d0922'\n}\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig)\n\nexport default firebase\n","import React, { createContext, useCallback, useState } from 'react'\nimport firebase from '../services/firebase'\nimport t from 'prop-types'\n\nexport const AuthContext = createContext()\n\nfunction Auth ({ children }) {\n  const [userInfo, setUserInfo] = useState({\n    isUserLogedIn: false,\n    user: null\n  })\n\n  const login = useCallback(() => {\n    const provider = new firebase.auth.GithubAuthProvider()\n    firebase.auth().signInWithRedirect(provider)\n  }, [])\n\n  const logout = useCallback(() => {\n    firebase.auth().signOut().then(() => {\n      setUserInfo({ isUserLogedIn: false, user: null })\n    })\n  }, [])\n\n  return (\n    <AuthContext.Provider value={{\n      login,\n      logout,\n      userInfo,\n      setUserInfo\n    }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nAuth.prototype = {\n  children: t.node.isRequired\n}\n\nexport default Auth\n","import React from 'react'\nimport { hot } from 'react-hot-loader'\nimport { HashRouter, Route } from 'react-router-dom'\nimport { CssBaseline, createMuiTheme, MuiThemeProvider } from '@material-ui/core'\nimport AuthProvider from './contexts/auth'\nimport App from './app'\n\nconst theme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  }\n})\n\nfunction Root () {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <AuthProvider>\n        <CssBaseline />\n\n        <HashRouter>\n          <Route component={App} />\n        </HashRouter>\n      </AuthProvider>\n    </MuiThemeProvider>\n  )\n}\n\nexport default hot(module)(Root)\n","import React, { Suspense, lazy, useContext, useEffect, useState } from 'react'\nimport { Redirect, Route, Switch } from 'react-router-dom'\nimport { LinearProgress } from '@material-ui/core'\nimport firebase from './services/firebase'\nimport { AuthContext } from './contexts/auth'\n\nconst MainPage = lazy(() => import('./pages/main'))\nconst Login = lazy(() => import('./pages/login'))\n\nfunction App ({ location }) {\n  const { userInfo, setUserInfo } = useContext(AuthContext)\n  const [didCheckUserIn, setDidCheckUserIn] = useState(false)\n\n  const { isUserLogedIn } = userInfo\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      console.log(user)\n      setUserInfo({\n        isUserLogedIn: !!user,\n        user: user && {\n          ...user,\n          firstName: user.displayName.split(' ')[0]\n        }\n      })\n      setDidCheckUserIn(true)\n    })\n  }, [setUserInfo])\n\n  if (!didCheckUserIn) {\n    return <LinearProgress />\n  }\n\n  if (isUserLogedIn && location.pathname === '/login') {\n    return <Redirect to='/' />\n  }\n\n  if (!isUserLogedIn && location.pathname !== '/login') {\n    return <Redirect to='/login' />\n  }\n\n  return (\n    <Suspense fallback={<LinearProgress />}>\n      <Switch>\n        <Route path='/login' component={Login} />\n        <Route path='/' component={MainPage} />\n      </Switch>\n    </Suspense>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import { PureComponent } from 'react'\nimport t from 'prop-types'\n\nclass ErrorBoundary extends PureComponent {\n  state = { hasError: false }\n\n  static protoTypes = {\n    children: t.func.isRequired\n  }\n\n  static getDerivedStateFromError () {\n    return { hasError: true }\n  }\n\n  render () {\n    return this.props.children(this.state.hasError)\n  }\n}\n\nexport default ErrorBoundary\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Root from './root'\nimport * as serviceWorker from './serviceWorker'\nimport ErrorBoundary from './error'\n\nReactDOM.render(\n  <ErrorBoundary>\n    {(hasError) => (\n      <Root hasError={hasError} />\n    )}\n  </ErrorBoundary>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}